= keywatcher

Simple monitoring for user key input and sequence detection. 

* Calls a given function as soon as it detects a registered key input sequence.
* Easy definition of keyinput to watch for with Strings ("start"), keyCodes ([Ky.ESC,Ky.RETURN]) or both (["start", Ky.RETURN, "end"])

Source[http://github.com/headjump/keywatcher]

== Usage

	KeyWatcher.alwaysFocus(this.stage);	// solves flash focus loosing problem :) 	
	var watcher:KeyWatcher = new KeyWatcher(this.stage);

	watcher.watch("start", myStartFunction);	// calls 'myStartFunction' when user types "start"

== Registering input to watch for

KeyWatcher monitors KEY_DOWN events and records them. You can register key sequences and KeyWatcher will call a callback function as soon as it detects the sequence.

Register sequences with a String, keyCode Array or both:

	watcher.watch("test", func);			// callback when user types "test"

	watcher.watch([65, 66], func);			// callback when user types keys with keyCode 65, 66

	watcher.watch(["xx", 65], func);		// callback when user types "xx", afterwards keys 65

Registering sequences with a String currently supports a..zA..Z0..9 and SPACE, so "hello world" will work, but "hello#^" fails.

=== Ky Class knows the keys

The Class Ky knows the keyCodes for the most common keys. Makes your life easier:

	watcher.watch([Ky.ESC, "test"], func);	// callback after "ESC" "t" "e" "s" "t"
	
	// Ky knows:
		// Letters
		Ky.A;
		// ...
		Ky.Z;
		
		// Numbers		
		Ky.N0;
		// ...
		Ky.N9;
		
		// control keys
		Ky.SPACE
		Ky.ESC
		Ky.RETURN
		Ky.BACKSPACE
		Ky.SHIFT
		Ky.CTRL

== Loosing focus workaround

It sometimes happens in Flash that the stage looses the focus for receiving KEY_DOWN Events. To prevent this, use 'alwaysFocus'

	KeyWatcher.alwaysFocus(this.stage);

It attaches an invisible DisplayObject to your Stage and everytime the Focus changes, it is set back to the hidden Object. If this collides with some of your code in specific situations, you can disable 'alwaysFocus' with

	KeyWatcher.killAlwaysFocus(this.stage);

... and enable it again later.

You can also use 'alwaysFocus' without using the rest of KeyWatcher. It reliably takes care of letting your stage receive Key Events - as long as the application itself has focus.

== Activate/Deactivate

Use 'active' to activate or deactivate sequence recognition

	watcher.active = false;		// disables this KeyWatcher
	watcher.active = true;		// enables

This can be handy if you use different watchers for different states in your application, e.g.

	function showConfig():void {
		main_watcher.active = false;
		config_watcher.active = true;
	}

As default a KeyWatcher is active.

== Predefined watches

As you instantiate a KeyWatcher, it automatically watches for

* 'watching' -> traces all registered key sequences
* 'history' -> enables/disables tracing of key sequence history (traces pressed keys and what is in the key history chain)